type TransferEvent = 
 record {
   from: principal;
   to: principal;
   value: nat;
 };
type Status_v2 = 
 record {
   isForeclosed: bool;
   offerTimestamp: int;
   offerValue: nat;
   owner: principal;
 };
type ProjectDetails_v2 = 
 record {
   createdTime: int;
   creator: text;
   description: text;
   isActive: bool;
   name: text;
 };
type PrincipalToNatEntry = 
 record {
   principal;
   nat;
 };
type PriceChange = 
 record {
   from: nat;
   owner: principal;
   to: nat;
 };
type Event = 
 record {
   data: variant {
           PriceChange: PriceChange;
           Transfer: TransferEvent;
         };
   id: nat;
   timestamp: int;
 };
type DataEntry_shared = 
 record {
   details: ProjectDetails_v2;
   events: vec Event;
   ownerIdEntries: vec PrincipalToNatEntry;
   owners: vec Block;
   projectId: nat;
   status: Status_v2;
 };
type CubicBackup = 
 service {
   get: () -> (Backup);
   load: (Backup) -> ();
 };
type Block = 
 record {
   id: nat;
   lastPurchasePrice: int;
   lastSalePrice: int;
   lastSaleTime: int;
   owner: principal;
   totalOwnedTime: int;
   totalSaleCount: nat;
   totalValue: nat;
 };
type Backup = 
 record {
   cubesSupply: nat;
   dataEntries: vec DataEntry_shared;
   feesCollected: nat;
   foreclosureCount: nat;
   lastTaxTimestamp: int;
   ledgerEntries: vec PrincipalToNatEntry;
   salesTotal: nat;
   taxCollected: nat;
   wtcBalance: nat;
   xtcBalance: nat;
 };
service : () -> CubicBackup
