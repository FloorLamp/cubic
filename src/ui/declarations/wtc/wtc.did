type User__1 = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   fee: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type Result_1 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Extension = text;
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Callback = func () -> ();
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : {
  acceptCycles: () -> ();
  actualCycles: () -> (nat) query;
  availableCycles: () -> (nat) query;
  balance: (BalanceRequest) -> (BalanceResponse) query;
  balance_secure: (BalanceRequest) -> (BalanceResponse);
  balances: () -> (vec record {
                         AccountIdentifier__1;
                         Balance__1;
                       }) query;
  burn: (Balance__1, Callback) -> (bool);
  extensions: () -> (vec Extension) query;
  extensions_secure: () -> (vec Extension);
  fee: () -> (Balance__1) query;
  metadata: (TokenIdentifier__1) -> (Result_1) query;
  metadata_secure: (TokenIdentifier__1) -> (Result_1);
  minCyclesThreshold: () -> (Balance__1) query;
  mint: (opt User__1) -> ();
  supply: (TokenIdentifier__1) -> (Result) query;
  supply_secure: (TokenIdentifier__1) -> (Result);
  transfer: (TransferRequest) -> (TransferResponse);
}
